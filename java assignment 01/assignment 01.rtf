{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs28\lang9 1.What is a programming language? What is Java and what is Java used ?foprogramming languages are the tools we use to write instructions for computers to follow. Computers \ldblquote think\rdblquote  in binary \f1\emdash  strings of 1s and 0s. Programming languages allow us to translate the 1s and 0s into something that humans can understand and write. A programming language is made up of a series of symbols that serves as a bridge that allow humans to translate our thoughts into instructions computers can understand.\par
Java is a general-purpose programming language that is class-based and object-oriented. The programming language is structured in such a way that developers can write code anywhere and run it anywhere without worrying about the underlying computer architecture.\par
\f0\lang1033 2.Which version of Java you are working with? How can you find out the version of Java you are using?\par
we are working with JAVA version 8.\par
It can be find by going to Git bash typing in java -version.\f1\lang9\par
\f0 3.What is IDE? Which IDE you are working with?\par
Integrated Development Environment, set of software require  whatever program needs to run gonna be in IDE.\par
4.What is source code? What is file extension for Java source code?\par
Source code is the set of instructions and statements written by a programmer using a computer programming language. This code is later translated into machine language by a compiler.\par
The source code file has file extension ". java". This is the file that is converted into the Java bytecode file, also called the class file. Everything that you physically code is "source code"\par
5.What is the second stage of Java life cycle?\par
There are three main stages in the life cycle of a java program. They are: Editing the program. Compiling the source code.\par
6.Which compiler is used for compiling Java file?\par
The compiler produces a compiled class file with the same name as the public class or interface declaration; the file extension used for a compiled Java file is . class.\par
7.What files are the input and output of the compilation stage?\par
The input of a Java compiler is a Java source code file and the output is a Java class file.\par
8.Which command is used to call Java compiler in terminal or CMD?\par
 Java program, open the Command Prompt by pressing Windows Key + R, type cmd and press enter key or click on the Ok button\par
9.What is the third stage of Java Life Cycle?\par
Third stage is the implementation, also known as the building phase. Developers actually code the software. And as they build, they will also do testing, or verification.\par
10. At which stage class loader is used and what function does it perform?\par
Class loaders are responsible for loading Java classes dynamically to the JVM (Java Virtual Machine) during runtime. They're also part of the JRE (Java Runtime Environment). Therefore, the JVM doesn't need to know about the underlying files or file systems in order to run Java programs thanks to class loaders.\par
11.Which unit is responsible for translating bytecodes into machine code?\par
JVM is responsible to converting bytecode to the machine specific code. JVM is also platform dependent and provides core java functions like garbage collection, memory management, security etc.\par
12. What is last stage of Java Life Cycle?\par
Last step is execution. The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM). Input to the JVM is bytecode and output is machine code (0's and 1's) which will be executed by the CPU of the local machine.\par
13. Which command is used to run Java program in terminal or CMD ?\par
open the Command Prompt by pressing Windows Key + R, type cmd and press enter key or click on the Ok button.\par
14. At what stage bytecode verifier is used?\par
At execution stage the bytecode varifier confirms that the bytecode are valid and not hostile.\par
15. What is JDK? Briefly explain the components of JDK?\par
 JDK in Java is an abbreviation for Java Development Kit. It is a bundle of software development tools and supporting libraries combined with the Java Runtime Environment (JRE) and Java Virtual Machine (JVM).\par
\par
The three vital software modules of JDK are:\par
\par
JVM (Java Virtual Machine): Java Virtual Machine is a software tool responsible for creating a run-time environment for the Java source code to run. The very powerful feature of Java, "Write once and run anywhere," is made possible by JVM.\par
\par
The JVM stays right on top of the host operating system and converts the java source code into ByteCode (machine language), and executes the program.\par
\par
JDK (Java Development Kit): We can define the Java Development Kit as a software development environment responsible for creating a run-time environment for the Java source code to run.\par
\par
JRE (Java Run-time Environment): Java Run-time Environment is a software platform where all the Java Source codes are executed. JRE is responsible for integrating the software plugins, jar files, and support libraries necessary for the source code to run.\par
\par
Components of JDK in Java\par
The fundamental components of JDK in Java are listed below.\par
\par
java\par
It acts as the deployment launcher in the older SUN java. It loads the class files and interprets the source code compiled by the javac compiler.\par
\par
javac\par
The javac specifies the java compiler to convert the source code into bytecode.\par
\par
javadoc\par
The javadoc generates documentation for the comments added in the source code.\par
\par
jar\par
The jar helps the archives to manage the jar files in the package library.\par
\par
jps\par
The jps stands for Java Virtual Machine Process Status Tool. It manages the active JVMs for the currently executing program.\par
\par
appletviewer\par
The appletviewer is designed to run and debug Java applets without the help of an internet browser.\par
\par
idlj\par
An IDL-to-Java compiler generates Java bindings from a given Java IDL file.\par
\par
javap\par
The javap acts as a file disassembler.\par
\par
JConsole\par
JConsole acts as a Java Management and Monitoring unit.\par
\par
javah\par
The javah is a stub-generator, and C-Header is employed to write native methods.\par
\par
javaws\par
The javaws acts as the Web Start launcher for JNLP applications.\par
\par
jhat\par
The jhat is a heap analysis tool.\par
\par
jmc\par
The jmc stands as an abbreviation for Java Mission Control.\par
16.Name main components present in JVM and write function of each component.\par
The JVM consists of three distinct components:\par
\par
Library Manager: To store Java classes in Oracle Database, you use the loadjava command-line tool, which uses the SQL CREATE JAVA statements to do its work. When called by the CREATE JAVA \{SOURCE | CLASS | RESOURCE\} statement, the library manager loads Java source, class, or resource files into the database. These Java schema objects are not accessed directly, and only an Oracle JVM uses them.\par
\par
Compiler: The Oracle JVM includes a standard Java compiler. When the CREATE JAVA SOURCE statement is run, it translates Java source files into architecture-neutral, one-byte instructions known as bytecodes. Each bytecode consists of an opcode followed by its operands. The resulting Java class files, which conform fully to the Java standard, are submitted to the interpreter at run time.\par
\par
Interpreter: To run Java programs, the Oracle JVM includes a standard Java 2 bytecode interpreter. The interpreter and the associated Java run-time system run standard Java class files. The run-time system supports native methods and call-in and call-out from the host environment.\par
\par
Class Loader: In response to requests from the run-time system, the Java class loader locates, loads, and initializes Java classes stored in the database. The class loader reads the class and generates the data structures needed to run it. Immutable data and metadata are loaded into initialize-once shared memory. As a result, less memory is required for each session. The class loader attempts to resolve external references when necessary. In addition, if the source files are available, then the class loader calls the Java compiler automatically when Java class files must be recompiled.\par
\par
Verifier: Java class files are fully portable and conform to a well-defined format. The verifier prevents the inadvertent use of spoofed Java class files, which might alter program flow or violate access restrictions. Oracle security and Java security work with the verifier to protect your applications and data.\par
\par
Server-Side JDBC Internal Driver: JDBC is a standard and defines a set of Java classes providing vendor-independent access to relational data. The JDBC classes are modeled after ODBC and the X/Open SQL Call Level Interface (CLI) and provide standard features, such as simultaneous connections to several databases, transaction management, simple queries, calls to stored procedures, and streaming access to LONG column data.\par
\par
Using low-level entry points, a specially tuned JDBC driver runs directly inside Oracle Database, providing fast access to Oracle data from Java stored procedures. The server-side JDBC internal driver complies fully with the standard JDBC specification. Tightly integrated with the database, the JDBC driver supports Oracle-specific data types, globalization character sets, and stored procedures. In addition, the client-side and server-side JDBC APIs are the same, which makes it easy to partition applications.\par
\par
Server-Side SQLJ Translator: SQLJ enables you to embed SQL statements in Java programs. It is more concise than JDBC and more responsive to static analysis and type checking. The SQLJ preprocessor, which itself is a Java program, takes as input a Java source file in which SQLJ clauses are embedded. Then, it translates the SQLJ clauses into Java class definitions that implement the specified SQL statements. The Java type system ensures that objects of those classes are called with the correct arguments.\par
A highly optimized SQLJ translator runs directly inside the database, where it provides run-time access to Oracle data using the server-side internal JDBC driver. SQLJ forms can include queries, data manipulation language (DML) statements, data definition language (DDL) statements, transaction control statements, and calls to stored procedures. The client-side and server-side SQLJ APIs are identical, making it easy to partition applications.\par
\par
System Classes: A set of classes that constitute a significant portion of the implementation of Java in Oracle Database environment is known as the System classes. These classes are defined in the SYS schema and exported for all users by public synonym. A class with the same name as one of the System classes can be defined in a schema other than the SYS schema. But, this is a bad practice because the alternate version of the class may behave in a manner that violates assumptions about the semantics of that class that are present in other System classes or in the underlying implementation of Java Virtual Machine. Oracle strongly discourages this practice.\par
17.What is JRE? In which stage of Java life cycle JRE is used?\par
A Java runtime environment (JRE) is a set of components to create and run a Java application. A JRE is part of a Java development kit (JDK).\par
\par
A JRE is made up of a Java virtual machine (JVM), Java class libraries, and the Java class loader. JDKs are used to develop Java software; JREs provide programming tools and deployment technologies; and JVMs execute Java programs.\par
\par
In stage three.\par
18.What is the syntax? Make a list of rules(you learned in a class) you should always follow while creating your Java application.\par
Syntax and rules in Java are how the programmer should write his code, much like grammar works in languages. The compiler doesn\rquote t care about the syntax \f1\endash  but programmers need to adhere to the correct syntax. Otherwise, it will be challenging for other programmers to understand your code. If everyone adheres to the same syntax, then it becomes easier for everyone to understand what it is that is programmed!\par
\par
List of Rules:\par
\par
Java is case-sensitive, which means, for example, Number and number have completely different meanings.\par
Name of Methods start with a lowercase letter\par
Name of a Class starts with a capital letter\par
All commands / operations must end with a semicolon ;\par
Special characters do not work in Java\par
\f0\lang1033 19.How should we name our Java application?\par
In Java, the java file name should be always the same as a public class name and Camel Casing. There should not be any special character.\par
20. \lang9 Write a structure of a simple Java application.\par
public class MyApp \{\par
    public static void main(String[] args) \{\par
        int a = 2;\par
        int y = 3;\par
        int sum = a + y;\par
        System.out.println("Sum: " + sum);\par
    21.What is the importance of comments in the program? Mention      different ways in which we can write comments in a program?\par
 Comments are text notes added to the program to provide explanatory information about the source code. They are used in a programming language to document the program and remind programmers of what tricky things they just did with the code and also helps the later generation for understanding and maintenance of code.\par
\par
Comments in Java:\par
\par
use // for a single line. Everything from the // to the end of that line of the file is ignored by the program.\par
\par
use /* for multiple lines */\par
22.Write a simple Java program to print the \ldblquote Hello World\rdblquote  message. Keeping in mind stages of Java Life Cycle draw a flow chart to show journey of your first program\par
public class HelloWorld \{\par
    public static void main(String[] args) \{\par
        System.out.println("Hello World");\par
    \}\par
\}\par
23.What is file extension for Java executable code? At which stage of Java Life Cycle we get executable code?\par
The file extension of java executable code is .class. At final stage we get executable code.\par
24. When does compile time starts?\par
Compile time gets started as soon as you start compiling the java source code using javac compiler.\par
25.Compile time ends with generation of which file?\par
Compile time ends when a .class file is generated.\par
26.Can you run the program without compilation? Try running your first program without compilation and share result.\par
No. After trying to run the first program without compilation I found the following result\par
My PC@DESKTOP-UBA01OH MINGW64 /d/IdeaProjects/QAAE2201/PracticeJava/First_Code\par
$ java HelloWorld.java \par
Error: Could not find or load main class HelloWorld.java\par
27.When does runtime start?\par
As soon as the programmer starts executing the program using java command, runtime gets started, and it ends when execution of program ended either successfully or unsuccessfully.\par
28.During which phase .class file is loaded into memory runtime or compile time? Who loads .class file into memory?\par
At execution phase .class file is loaded into memory runtime or compile time.\par
\par
The Class Loaders are important and powerful tool in JVM, which loads Java classes into memory when required.\par
.\par
\par
\par
\par
\par
\par
\fs22\par
}
 